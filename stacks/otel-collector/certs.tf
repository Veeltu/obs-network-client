locals {
  certs = toset([
    "gw.observability.test.pndrs.de",
    #"opsgw2.ctn-h.test.pndrs.de", # for testing purposes so its tested with multiple already
  ])
}

# This  resource initiates certificate generation—it creates a Certificate manifest for cert-manager in Kubernetes. Here’s how it works:
#  - When this manifest is applied, cert-manager automatically starts the process of issuing a certificate for the specified domain (dnsNames).
#  - The certificate is generated by the specified ClusterIssuer (in this case, edp-internal).
#  - Once the certificate is issued, cert-manager stores it in a Kubernetes Secret with the name specified in secretName, within the given namespace.

# The kubernetes_manifest "certs" resource does not generate the certificate directly, but it triggers the automated certificate issuance process via cert-manager. The certificate will appear in the Secret after cert-manager completes the process.


# resource "kubernetes_manifest" "certs" {
#   for_each = local.certs
#   manifest = {
#     apiVersion = "cert-manager.io/v1"
#     kind       = "Certificate"
#     metadata = {
#       name      = replace(each.key, ".", "-")
#       namespace = kubernetes_namespace.network.metadata.0.name
#       # namespace = kubernetes_namespace.traefik.metadata.0.name
#     }
#     spec = {
#       dnsNames = [
#         each.key
#       ]
#       duration = "8760h0m0s"
#       issuerRef = {
#         kind = "ClusterIssuer"
#         name = "edp-internal"
#       }
#       secretName = replace(each.key, ".", "-")
#     }
#   }

#   timeouts {
#     create = "10m"
#     delete = "5m"
#   }
# }