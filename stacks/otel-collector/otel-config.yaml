# Main OpenTelemetry Collector configuration file
# This collector is deployed as a gateway/central collector
# https://opentelemetry.io/docs/collector/deployment/gateway/

receivers:
  # Standard OpenTelemetry Protocol (OTLP) receiver
  # Accepts telemetry data in OTLP format via gRPC and HTTP
  otlp:
    protocols:
      grpc:
        endpoint: ${env:MY_POD_IP}:4317  # Using pod IP to bind to the correct interface
      http:
        endpoint: ${env:MY_POD_IP}:4318  # HTTP endpoint for OTLP
  
  # Kubernetes Cluster Receiver
  # Collects metrics about the Kubernetes cluster itself
  # https://opentelemetry.io/docs/kubernetes/collector/components/
  # https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/k8sclusterreceiver
  # **IMPORTANT NOTICE**:
  # this will have to move to its own collector as we really just want one of these running or we will duplicate the data
  k8s_cluster:
    auth_type: serviceAccount  # Uses the service account for authentication
    collection_interval: 10s   # How often to collect metrics
    metadata_collection_interval: 5m  # How often to collect metadata
    node_conditions_to_report: [Ready, DiskPressure, MemoryPressure, PIDPressure, NetworkUnavailable]  # Node conditions to monitor
    allocatable_types_to_report: [cpu, memory, ephemeral-storage, storage]  # Resource types to monitor

  # TODO: Prometheus Receiver https://opentelemetry.io/docs/kubernetes/collector/components/#prometheus-receiver
  # TODO: Kubernetes Objects Receiver https://opentelemetry.io/docs/kubernetes/collector/components/#kubernetes-objects-receiver
  
  # Syslog Receiver for RFC5424 format
  # Collects syslog messages in RFC5424 format via TCP and UDP
  # https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/syslogreceiver/README.md
  syslog/rfc5424:
    tcp:
      listen_address: ${env:MY_POD_IP}:54526  # TCP endpoint for syslog
    udp:
      listen_address: ${env:MY_POD_IP}:54527  # UDP endpoint for syslog
    protocol: rfc5424  # Using RFC5424 format (modern syslog)
    enable_octet_counting: false  # Don't use octet counting framing
    allow_skip_pri_header: false  # Require priority header
    location: UTC  # Use UTC for timestamps
  
  # Syslog Receiver with TLS encryption
  # Secure version of the syslog receiver using TLS certificates
  # https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/syslogreceiver/README.md
  syslog/rfc5424tls:
    tcp:
      listen_address: ${env:MY_POD_IP}:54528  # TLS-encrypted TCP endpoint
      tls:
        cert_file: /etc/otelcol-contrib/secrets/gw-observability-test-pndrs-de.crt  # TLS certificate
        key_file: /etc/otelcol-contrib/secrets/gw-observability-test-pndrs-de.key   # TLS private key
        #ca_file:  # Optional CA certificate for client verification
        #client_ca_file:  # Optional CA for client certificates
    protocol: rfc5424  # Using RFC5424 format
    enable_octet_counting: false  # Don't use octet counting framing
    allow_skip_pri_header: false  # Require priority header
    location: UTC  # Use UTC for timestamps

  # Commented out alternative TLS configuration
  # syslog/rfc5424tlst:
  #   tcp:
  #     listen_address: ${env:MY_POD_IP}:54529
  #   protocol: rfc5424
  #   enable_octet_counting: false
  #   allow_skip_pri_header: false
  #   location: UTC

  # Syslog Receiver for RFC3164 format (legacy syslog)
  # Collects syslog messages in older RFC3164 format
  # https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/receiver/syslogreceiver/README.md
  syslog/rfc3164:
    tcp:
      listen_address: ${env:MY_POD_IP}:54528  # TCP endpoint for legacy syslog
    udp:
      listen_address: ${env:MY_POD_IP}:54529  # UDP endpoint for legacy syslog
    protocol: rfc3164  # Using RFC3164 format (legacy syslog)
    enable_octet_counting: false  # Don't use octet counting framing
    allow_skip_pri_header: false  # Require priority header
    location: UTC  # Use UTC for timestamps

  # Prometheus Receiver for VyOS network devices
  # Collects metrics from VyOS routers via SNMP
  # https://confluence.bare.pandrosion.org/pages/viewpage.action?pageId=190612318#POCSyslogMessagingforObservability-ObservabilityMeasures
  # debug commands:
  # k port-forward svc/prom-snmp-exporter 9116:9116
  # curl 'http://localhost:9116/snmp?module=hrSystem&module=system&module=if_mib&target=er-2613e3531e2348a087063887378c2a0f.default-doe.stable.pndrs.de&auth=vyos'
  # curl 'http://localhost:9116/snmp?module=vyos_system&target=er-2613e3531e2348a087063887378c2a0f.default-doe.stable.pndrs.de&auth=vyos'
  prometheus/vyos:
    config:
      scrape_configs:
        # Global exporter-level metrics from the SNMP exporter itself
        - job_name: snmp_exporter
          static_configs:
            - targets: ['prom-snmp-exporter:9116']
        
        # SNMP metrics from VyOS routers
        - job_name: snmp
          static_configs:
            - targets:  # List of VyOS routers to monitor
                - er-2613e3531e2348a087063887378c2a0f.default-doe.stable.pndrs.de
                - er-2516c83242e043ea93c56fc04589075f.doe.stable.pndrs.de
                - er-39a82c2460804a0c99868ce5ca779300.zerocarbon-1.stable.pndrs.de
          metrics_path: /snmp  # Path for SNMP metrics
          params:
            auth:
              - vyos  # Authentication parameter
            # SNMP modules to collect (MIBs)
            module:
              # SNMPv2-MIB - Basic system information
              # https://mibbrowser.online/mibdb_search.php?mib=SNMPv2-MIB
              # https://github.com/prometheus/snmp_exporter/blob/16185db0f330e5e6eadf8cd83741cde80320edfe/snmp.yml#L42025
              - system

              # IF-MIB - Network interface metrics
              # https://mibbrowser.online/mibdb_search.php?mib=IF-MIB
              # https://github.com/prometheus/snmp_exporter/blob/16185db0f330e5e6eadf8cd83741cde80320edfe/snmp.yml#L22378
              - if_mib

              # HOST-RESOURCES-MIB - System resource metrics
              # https://mibbrowser.online/mibdb_search.php?mib=HOST-RESOURCES-MIB
              # https://github.com/prometheus/snmp_exporter/blob/16185db0f330e5e6eadf8cd83741cde80320edfe/snmp.yml#L22342
              - hrSystem  # System metrics
              - hrSWRunPerf  # Software performance
              - hrStorage  # Storage metrics
              - hrSWRun  # Running software

              # UCD System Stats
              # https://mibbrowser.online/mibdb_search.php?mib=UCD-SNMP-MIB
              # https://github.com/prometheus/snmp_exporter/blob/16185db0f330e5e6eadf8cd83741cde80320edfe/snmp.yml#L44975C3-L44975C19
              - ucd_memory

              # UCD System Stats
              # https://mibbrowser.online/mibdb_search.php?mib=UCD-SNMP-MIB
              # https://github.com/prometheus/snmp_exporter/blob/16185db0f330e5e6eadf8cd83741cde80320edfe/snmp.yml#L44975C3-L44975C19
              - ucd_system_stats

              - ip_mib

              - cisco_fc_fe
              
          # Relabeling to properly set up SNMP targets
          relabel_configs:
            - source_labels: [__address__]
              target_label: __param_target  # Set target parameter for SNMP
            - source_labels: [__param_target]
              target_label: instance  # Set instance label
            - target_label: __address__
              replacement: prom-snmp-exporter:9116  # The SNMP exporter's real hostname:port

        # FRR (Free Range Routing) metrics from VyOS routers
        - job_name: frr_exporter
          static_configs:
            - targets:  # Same list of VyOS routers
                - er-2613e3531e2348a087063887378c2a0f.default-doe.stable.pndrs.de
                - er-2516c83242e043ea93c56fc04589075f.doe.stable.pndrs.de
                - er-39a82c2460804a0c99868ce5ca779300.zerocarbon-1.stable.pndrs.de
          metrics_path: /metrics  # Standard Prometheus metrics path
          relabel_configs:
            # 1. add port 9342 to targets (FRR exporter port)
            - source_labels: [__address__]
              regex: (.*)  # target all
              replacement: $1:9342  # add port
              target_label: __address__  # replace address

            # 2. set instance without port for better labeling
            - source_labels: [__address__]  # get address with port
              regex: (.*):9342  # match address with port
              target_label: instance  # set instance
              replacement: $1  # replace with address without port

        # Blackbox exporter metrics for connectivity tests
        - job_name: blackbox_exporter
          static_configs:
            - targets:  # Same list of VyOS routers
                - er-2613e3531e2348a087063887378c2a0f.default-doe.stable.pndrs.de
                - er-2516c83242e043ea93c56fc04589075f.doe.stable.pndrs.de
                - er-39a82c2460804a0c99868ce5ca779300.zerocarbon-1.stable.pndrs.de
          metrics_path: /metrics  # Standard Prometheus metrics path
          relabel_configs:
            # 1. add port 9115 to targets (Blackbox exporter port)
            - source_labels: [__address__]
              regex: (.*)  # target all
              replacement: $1:9115  # add port
              target_label: __address__  # replace address

            # 2. set instance without port for better labeling
            - source_labels: [__address__]  # get address with port
              regex: (.*):9115  # match address with port
              target_label: instance  # set instance
              replacement: $1  # replace with address without port

        # Node exporter metrics for system-level metrics
        - job_name: node_exporter
          static_configs:
            - targets:  # Same list of VyOS routers
                - er-2613e3531e2348a087063887378c2a0f.default-doe.stable.pndrs.de
                - er-2516c83242e043ea93c56fc04589075f.doe.stable.pndrs.de
                - er-39a82c2460804a0c99868ce5ca779300.zerocarbon-1.stable.pndrs.de
          metrics_path: /metrics  # Standard Prometheus metrics path
          relabel_configs:
            # 1. add port 9481 to targets (Node exporter port)
            - source_labels: [__address__]
              regex: (.*)  # target all
              replacement: $1:9481  # add port
              target_label: __address__  # replace address

            # 2. set instance without port for better labeling
            - source_labels: [__address__]  # get address with port
              regex: (.*):9481  # match address with port
              target_label: instance  # set instance
              replacement: $1  # replace with address without port

processors:
  # Batch processor to combine data points for more efficient export
  batch:
  
  # Memory limiter to prevent OOM issues
  memory_limiter:
    # 80% of maximum memory up to 2G
    limit_mib: 1500  # Memory limit in MiB
    # 25% of limit up to 2G
    spike_limit_mib: 512  # Spike limit in MiB
    check_interval: 5s  # How often to check memory usage
  
  # Kubernetes attributes processor
  # Adds Kubernetes metadata to telemetry data
  k8sattributes:
    auth_type: 'serviceAccount'  # Use service account for authentication
    extract:
      metadata:  # Metadata to extract from Kubernetes
        - k8s.namespace.name  # Namespace name
        - k8s.pod.name  # Pod name
        - k8s.pod.start_time  # Pod start time
        - k8s.pod.uid  # Pod UID
        - k8s.deployment.name  # Deployment name
        - k8s.node.name  # Node name
      # Commented out annotation extraction
      # annotations:
      #   # Extracts the value of a pod annotation with key `annotation-one` and inserts it as a resource attribute with key `a1`
      #   - tag_name: a1
      #     key: annotation-one
      #     from: pod
      #   # Extracts the value of a namespaces annotation with key `annotation-two` with regexp and inserts it as a resource  with key `a2`
      #   - tag_name: a2
      #     key: annotation-two
      #     regex: field=(?P<value>.+)
      #     from: namespace
      # labels:
      #   # Extracts the value of a namespaces label with key `label1` and inserts it as a resource attribute with key `l1`
      #   - tag_name: l1
      #     key: label1
      #     from: namespace
      #   # Extracts the value of a pod label with key `label2` with regexp and inserts it as a resource attribute with key `l2`
      #   - tag_name: l2
      #     key: label2
      #     regex: field=(?P<value>.+)
      #     from: pod
    pod_association:  # How to associate the data to a pod (order matters)
      - sources:  # First try to use the value of the resource attribute k8s.pod.ip
          - from: resource_attribute
            name: k8s.pod.ip
      - sources:  # Then try to use the value of the resource attribute k8s.pod.uid
          - from: resource_attribute
            name: k8s.pod.uid
      - sources:  # If neither of those work, use the request's connection to get the pod IP
          - from: connection



extensions:
  zpages:
    endpoint: 0.0.0.0:55679
  # zpages: {}  # Commented out ZPages extension for debugging

exporters:
  # Kafka exporters for different telemetry types
  # https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/exporter/kafkaexporter/README.md
  kafka/traces:  # Kafka exporter for traces
    brokers:  # Kafka broker addresses
      - otel-kafka-bootstrap.kafka-cluster:9094
    protocol_version: 3.9.0  # Kafka protocol version
    topic: poc-otel-network-traces  # Kafka topic for traces
    #encoding: otlp_json  # readable for debugging, default is pb (protobuf)
    auth:  # Authentication for Kafka
      sasl:
        username: ${env:KAFKA_USERNAME}  # Username from environment variable
        password: ${env:KAFKA_PASSWORD}  # Password from environment variable
        mechanism: SCRAM-SHA-512  # Authentication mechanism
        version: 1  # SASL version
  
  kafka/metrics:  # Kafka exporter for metrics
    brokers:
      - otel-kafka-bootstrap.kafka-cluster:9094
    protocol_version: 3.9.0
    topic: poc-otel-network-metrics  # Kafka topic for metrics
    #encoding: otlp_json  # readable for debugging, default is pb
    auth:
      sasl:
        username: ${env:KAFKA_USERNAME}
        password: ${env:KAFKA_PASSWORD}
        mechanism: SCRAM-SHA-512
        version: 1
  
  kafka/logs:  # Kafka exporter for logs
    brokers:
      - otel-kafka-bootstrap.kafka-cluster:9094
    protocol_version: 3.9.0
    topic: poc-otel-network-logs  # Kafka topic for logs
    #encoding: otlp_json  # readable for debugging, default is pb
    auth:
      sasl:
        username: ${env:KAFKA_USERNAME}
        password: ${env:KAFKA_PASSWORD}
        mechanism: SCRAM-SHA-512
        version: 1
# for testing 
  # prometheus:
  #   endpoint: "0.0.0.0:8888"

  # otlp/tempo:
  #   endpoint: "http://tempo.tempo:4317" 
  #   tls:
  #     insecure: true
  # otlphttp/tempo:
  #   endpoint: "http://tempo.tempo:4318" 
    
  # # https://grafana.com/docs/loki/latest/send-data/otel/
  # otlphttp/loki:
  #   endpoint: http://loki.loki:3100/otlp
  
  # # https://prometheus.io/docs/guides/opentelemetry/
  # # https://github.com/open-telemetry/opentelemetry-collector/blob/main/exporter/otlphttpexporter/README.md
  # otlphttp/prometheus:
  #   endpoint: http://prometheus-server.prometheus:80/api/v1/otlp
  #   encoding: proto
  #   # we only have metrics
  #   metrics_endpoint: http://prometheus-server.prometheus:80/api/v1/otlp/v1/metrics
  #   # TBD: not sure, but didnt find a way to turn off
  #   traces_endpoint: none
  #   logs_endpoint: none

    

  # https://github.com/open-telemetry/opentelemetry-collector/blob/main/exporter/debugexporter/README.md
  debug: 
    verbosity: basic # basic/detailed 

service:
  pipelines: 
    metrics/k8s_cluster:
      receivers: [k8s_cluster]
      exporters: [kafka/metrics]
    
    traces:
      receivers: [otlp]
      processors: [memory_limiter, batch]
      exporters: [kafka/traces, debug]

    logs:
      receivers: [otlp]
      processors: [memory_limiter, batch]
      exporters: [kafka/logs, debug]
      
    metrics:
      receivers: [otlp]
      processors: [memory_limiter, batch]
      exporters: [kafka/metrics, debug]

    logs/syslog-test:
      receivers: [syslog/rfc5424, syslog/rfc5424tls]
      #processors: [memory_limiter, batch]
      exporters: [kafka/logs, debug]

    metrics/vyos:
        receivers: [prometheus/vyos]
        processors: [memory_limiter, batch]
        exporters: [kafka/metrics, debug]
